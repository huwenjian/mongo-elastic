

# 前后端分离项目采用Prerender的SEO优化流程
https://www.cnblogs.com/qianjun2017/p/12512051.html

#安装google-chrome
	创建一个文件/etc/yum.repos.d/google-chrome.repo文件内容如下
	[google-chrome]
	name=google-chrome
	baseurl=http://dl.google.com/linux/chrome/rpm/stable/x86_64
	enabled=1
	gpgcheck=1
	gpgkey=https://dl.google.com/linux/linux_signing_key.pub

	执行安装命令 yum -y install google-chrome-stable –nogpgcheck
　　安装完后默认路径为 /opt/google/chrome
　　修改/usr/bin/google-chrome文件，最后一行改为 exec -a "$0" "$HERE/chrome" "$@" --user-data-dir --no-sandbox

#安装 node
    cd /opt
    wget https://nodejs.org/dist/v12.18.1/node-v12.18.1-linux-x64.tar.xz    // 下载
    tar xf node-v12.18.1-linux-x64.tar.xz                                   // 解压
    cd node-v12.18.1-linux-x64
    export PATH=$PATH:/opt/node-v12.18.1-linux-x64/bin
    source /etc/profile

# 安装prerender
  https://blog.csdn.net/weixin_34336526/article/details/94483382?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.nonecase

  git clone https://github.com/prerender/prerender.git
  cd prerender
  cnpm install
  node server.js



  #prerender server.js 配置
    https://www.jianshu.com/p/840f8f233af5
    # 设置linux 环境变量
        export REDIS_URL= redis://root:xhs123456@172.25.0.12:7001

    var prerender = require('./lib');
    var server = prerender({
        pageLoadTimeout: 127*1000
    });
    server.use(prerender.sendPrerenderHeader());
    // server.use(prerender.blockResources());
    server.use(prerender.removeScriptTags());
    server.use(prerender.httpHeaders());
    server.use(require('prerender-redis-cache').set('REDIS_URL','redis://root:xhs123456@172.25.0.12:7001'));
    //server.use(require('prerender-memory-cache'));

    server.start();


#安装nginx https://blog.csdn.net/t8116189520/article/details/81909574

    yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel
    cd /opt
    mkdir nginx
    cd nginx
    //下载tar包
    wget http://nginx.org/download/nginx-1.13.7.tar.gz
    tar -xvf nginx-1.13.7.tar.gz
    cd nginx-1.13.7
    ./configure
    make
    make install

    安裝到/usr/local/nginx
    vim /usr/local/nginx/conf/nginx.conf
    #启动nginx
    ./usr/local/nginx/sbin/nginx -s reload

#设置server.js  https://www.jianshu.com/p/840f8f233af5
    prerender.basicAuth()

    # prerender.removeScriptTags()
        去除 script 标签是因为我们并不想让已经渲染好的 HTML 再被 Javascript 框架渲染，爬虫或许不会执行脚本
        例如，如果一个基于 Angular 的页面已经被渲染成了 HTML，但是还保留 Angular 脚本在页面上，浏览器将在页面上有一次执行 Angular 进行渲染并且绑定数据。
        这个插件实现了beforeSend方法，因此被缓存的 HTML 页面仍然包含 script 标签。
    #prerender.httpHeaders()
        如果脚本路由过程中发现了类似于404的错误，我们可以让 Prerender 服务给搜索引擎返回404，这样搜索引擎将不会收录这个页面。
        如果想要返回 HTTP Headers，增加如下标签在页面的<head>中。注：Prerender 仍然发送页面的 HTML，它仅仅是改变了 HTTP Header 的状态码
# prerender-memory-cache
    https://github.com/prerender/prerender-memory-cache
    不持久化
# prerender-redis-cache https://developer.aliyun.com/mirror/npm/package/prerender-redis-cache
    npm install prerender-redis-cache --save
    export REDIS_URL=redis://root:xhs123456@172.25.0.12:7001

    server.use(require('prerender-redis-cache'));
    #永不过期
    vim /etc/profile
    export PAGE_TTL=0
    source /etc/profile

# prerender-mongo-cache
  npm install prerender-mongodb-cache --save
  server.use(require('prerender-mongodb-cache'));

#启动
    nohup node server.js > log/prerender.log 2>&1 &
    nohup node server.js > prerender.log 2>&1 &
##### prerender 守护进程
 1将prerender 拷贝至 /etc/init.d/ 目录下 https://blog.csdn.net/qq_33834489/article/details/79247133

    # 服务新增文件可执行权限
    chmod +x /etc/init.d/prerender

    # 重新载入systemctl
    systemctl daemon-reload

    # 启动
    service prerender start
 2 forever是一个简单的命令式nodejs的守护进程 https://www.jianshu.com/p/f5f1f4d64483
    #https://www.jianshu.com/p/f5f1f4d64483
    npm install forever -g
    forever start server.js

#测试
 curl http://172.29.11.5
 curl  --header "User-agent:Bingbot" http://172.29.11.5 > index.html
 curl  --header "User-agent:localSpider" http://172.29.11.5 > index.html
 curl --header "User-agent:localSpider" http://172.29.11.5:3000/https://www.c.com > index.html
 测试credit100线上首页
 curl http://172.29.11.5:3000/http://172.29.11.5
#问题
 prerender 守护进程 超时 https://blog.csdn.net/qq_33834489/article/details/79247133
 https://www.deboy.cn/prerender-vuejs1-X-SEO-best-practice.html
 测试credit100线上--信用发布
 curl http://172.29.11.5:3000/https://www.c.com/creditReleaseIndex >creditReleaseIndex.html
 curl http://172.29.11.5:3000/https://www.c.com/enterpIntroduction/enterpBasicArchives?companyId=99ceb6d3b09b99536d137b075ae9149f&companyName=%E5%A4%A9%E5%A3%AB%E5%8A%9B%E6%8E%A7%E8%82%A1%E9%9B%86%E5%9B%A2%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8 -> jpan.html

 测试credit100线上--城市信用
 curl http://172.29.11.5:3000/https://www.c.com/cityService/cityCreditNav >cityService-cityCreditNav.html


 测试credit100线上--企业信用
  curl http://172.29.11.5:3000/https://www.c.com/creditPoints >creditPoints.html
  curl http://172.29.11.5:3000/https://www.c.com/cityService/cityCreditNav/leadershipCockpit >cityService-cityCreditNav-leadershipCockpit.html

 测试查询具体公司
 curl http://172.29.11.5:3000/https://www.c.com/enterpIntroduction/enterpBasicArchives?companyId=99ceb6d3b09b99536d137b075ae9149f&amp;companyName=%E5%A4%A9%E5%A3%AB%E5%8A%9B%E6%8E%A7%E8%82%A1%E9%9B%86%E5%9B%A2%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8 > tianlishi.html


 curl http://172.29.11.5:3000/render?url=https://www.c.com/



 #爬虫项目
 https://github.com/search?q=webmagic
 https://gitee.com/flashsword20/webmagic
 https://github.com/gsh199449/spider

# [WebMagic]Https下无法抓取只支持TLS1.2的站点 https://blog.csdn.net/tateliao/article/details/95113303

#HttpServletResponse和 ResponseEntity下载文件预览图片
 https://blog.csdn.net/qq_26584263/article/details/97972922






curl  --header "User-agent:localSpider" http://172.29.11.5/creditSerech
|
http://172.29.11.5:3000/http://172.29.11.5/creditSerech


http://172.29.11.5:3000/https://www.c.com/creditSerech





























