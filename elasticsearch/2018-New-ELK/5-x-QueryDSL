#query DSL
    # match
        GET test_search_index/_search
        {
          "explain":true,
          "query": {
             "username":"alfred way",
             "operator":"and",            //default or
             "minimum_should_match":"2"   //控制需要匹配的单词数 如果单词数大于query 也就是说 是operator的升级属性 比operator更灵活
          }
        }

    #match phrase query 对字段作检索 有顺序要求
        GET test_search_index/_search
        {
          "query": {
            "match_phrase": {
              "job": "java engineer",
              "slop":"1"     //通过slop参数可以控制单词间的间隔 可以返回 java hello engineer
            }
          }
        }

    # query string
        GET test_search_index/_search
        {
          "profile":true,
          "query":{
            "query_string": {
              "default_field": "username",
              "query": "alfred AND way"
            }
          }
        }

       GET test_search_index/_search
       {
         "profile":true,
         "query": {
           "query_string": {
             "fields": [
               "username",
               "job"
             ],
             "query": "alfred OR (java AND ruby)"   包含alfred或者(java和ruby)
           }
         }
       }
        # simple query string
            类似QueryString 会忽略错误的查询语法 并且仅支持部分查询语法
            其常用的逻辑符号如下 不能使用AND OR NOE 等关键词 (AND 被当 and 查询)
            +：代指 AND
            |：代指 OR
            -：代指 NOT
        GET test_search_index/_search
        {
          "profile":true,
          "query":{
            "simple_query_string": {
             "query": "alfred +way \"java", 必须包含way 可以包含alfred  \"java" 在query_string (里面会报错 而在simple_query_string 不会报错)
             "fields": ["username"]
            }
          }
        }






        #term-terms-query 不会对 传入的内容作分词查询
            # term query
                    GET test_search_index/_search
                    {
                      "query":{
                        "term":{
                          "username":"alfred"
                        }
                      }
                    }
            #terms query
            GET test_search_index/_search
            {
              "query": {
                "terms": {
                  "username": [
                    "alfred",
                    "way"
                  ]
                }
              }
            }

        #range query
            #查询年龄 大于等于10 小于等于30
            GET test_search_index/_search
            {
              "query":{
                "range": {
                  "age": {
                    "gte": 10,
                    "lte": 30
                  }
                }
              }
            }

            #查询日期
                #大于1980-0101
            GET test_search_index/_search
            {
              "query":{
                "range": {
                  "birth": {
                    "gte": "1980-01-01"
                  }
                }
              }
            }
                #data math
                now：可以是当前日期 也可以指定日期 如：2018-01-01 使用具体日期 要用|| 作横幅
                +1h 加 1小时
                -d  减一天
                /d  将时间舍入到天

                #主要单位有如下几种  y:years M：months w：weeks d:days h:hours m:minutes s:seconds
            GET test_search_index/_search
            {
              "query":{
                "range": {
                  "birth": {
                    "gte": "now-30y"
                  }
                }
              }
            }
                ##具体时间
            GET test_search_index/_search
            {
              "query":{
                "range": {
                  "birth": {
                    "gte": "2010||-20y/d"  1990
                  }
                }
              }
            }

        #复合查询 包含字段类查询或复合查询的类型
            -constant_score_query
            -bool query
            -dis_max_query
            -function_score query
            -boosting query

                #constant_score_query 该查询将其内部的查询结果文档得分都设定为1 或者boost的值
                    -多用于结合bool查询实现自定义得分

                    # constant score
                    GET test_search_index/_search
                    {
                      "query":{
                        "constant_score": {
                          "filter": {   //filter只能有一个
                            "match":{
                              "username":"alfred"
                            }
                          }
                        }
                      }
                    }

                    #GET test_search_index/_search
                    {
                      "query": {
                        "bool": {
                          "should": [
                            {
                              "constant_score": {
                                "filter": {
                                  "match": {
                                    "job": "java"
                                  }
                                }
                              }
                            },
                            {
                              "constant_score": {
                                "filter": {
                                  "match": {
                                    "job": "ruby"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                #bool query
                    -filter 查询只过滤符合条件的文档 不会进行相关性得分
                        -es针对filter会有智能缓存 因此执行效率很高
                        -做简单匹配查询且不考虑算分时 推荐使用filter替代query

                        ##filter query
                         GET test_search_index/_search
                         {
                           "query": {
                             "bool": {
                               "filter": [
                                 {
                                   "term": {
                                     "username": "alfred"
                                   }
                                 }
                               ]
                             }
                           }
                         }
                    -must

                        GET test_search_index/_search
                        {
                          "query": {
                            "bool": {
                              "must": [
                                {
                                  "match": {
                                    "username": "alfred"
                                  }
                                },
                                {
                                  "match": {
                                    "job": "specialist"
                                  }
                                }
                              ]
                            }
                          }
                        }
                    -must_not
                        GET test_search_index/_search
                        {
                          "query": {
                            "bool": {
                              "must": [
                                {
                                  "match": {
                                    "job": "java"
                                  }
                                }
                              ],
                              "must_not": [
                                {
                                  "match": {
                                    "job": "ruby"
                                  }
                                }
                              ]
                            }
                          }
                        }
                    -should
                        minimum_should_match 可以控制满足条件的个数或者百分比
                        GET test_search_index/_search
                        {
                          "query": {
                            "bool": {
                              "should": [
                                {
                                  "match": {
                                    "username": "junior"
                                  }
                                },
                                {
                                  "match": {
                                    "job": "ruby"
                                  }
                                }
                              ]
                            }
                          }
                        }

                        GET test_search_index/_search
                        {
                          "query": {
                            "bool": {
                              "should": [
                                {"term": {"job": "java"}},
                                {"term": {"job": "ruby"}},
                                {"term": {"job": "specialist"}}
                              ],
                              "minimum_should_match": 2
                            }
                          }
                        }

                        #同时包含should和must时 文档不必满足should中的条件,但是如果满足条件,会增加相关性得分
                        GET test_search_index/_search
                        {
                          "query": {
                            "bool": {
                              "must": [
                                {
                                  "term": {
                                    "username": "alfred"
                                  }
                                }
                              ],
                              "should": [
                                {
                                  "term": {
                                    "job": "ruby"
                                  }
                                }
                              ]
                            }
                          }
                        }


                    #################
                    GET test_search_index/_search
                    {
                      "query": {
                        "bool": {
                          "must": [
                            {}
                          ],
                          "must_not": [
                            {}
                          ],
                          "should": [
                            {}
                          ],
                          "filter": [
                            {}
                          ]
                        }
                      }
                    }

            ##Count API
                 # count
                 GET test_search_index/_count
                 {
                   "query":{
                     "match":{
                       "username": "alfred"
                     }
                   }
                 }
            ## source filtering
            GET test_search_index/_search

            GET test_search_index/_search?_source=username

            GET test_search_index/_search
            {
              "_source": false
            }

            GET test_search_index/_search
            {
              "_source": ["username","age"]
            }

            GET test_search_index/_search
            {
              "_source": {
                "includes": "*i*",
                "excludes": "birth"
              }
            }


