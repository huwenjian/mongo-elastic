#


#自定义mapping


    #4-4 copy_to


    #4-5 index false false即为 不可查询 会报错-》针对敏感信息 如身份证号
       - PUT my_index
         {
            "mappings":{
                "doc":{
                    "properties":{
                        "cookie":{
                            "type":"text",
                            "index":"false",
                            "null_value":"NULL"
                        }
                    }
                }
            }
         }
       - PUT my_index/doc/1
        {
          "cookie": "name=huwenjian"
        }
       - GET my_index/_search
        {
          "query":{
            "match":{
                "cookie":"name"
              }
           }
        }
    #4-6 index_options 用于控制倒排索引记录的内容
         值为空默认为null  "null_value":"NULL"


    #4-7 mapping 文档说明
         doc_values

    #4-8 数据类型
         long integer short byte double float half_float scaled_float (1|0 byte)   float比double节省50%空间
         array 由第一个非null值决定
         ip
         多字段 比如 汉子+拼音
         PUT my_index
                  {
                     "mappings":{
                         "doc":{
                             "properties":{
                                 "username":{
                                     "type":"text",
                                     "fields":{
                                        "pinyin":{
                                            "type":"text",
                                            "analyzer":"pinyin"
                                        }
                                     }
                                 }
                             }
                         }
                     }
                  }
         GET my_index/_search
         {
            "query":{
                "match":{
                    "username.pinyin":"hanhan"
                }
            }
         }


    #4-11 Dynamic Templates API
          根据字段名动态创建mapping
          match_mapping_type 匹配es自动识别得字段类型 like: bloolean long string
          match unmatch 匹配字段名 (以message开头设置为text)
          path_match path_unmatch 匹配路径
          eg 1 :  将字符串设置为keyword类型(es默认会为字符串设置为text类型 并增加一个keyword的子字段)
          PUT my_index
          {
            "mappings":{
                "doc":{
                    "dynamic_templates":[{
                        "strings_as_keyword":{
                            "match_mapping_type":"string",
                            "mapping":{
                            "type":"keyword"
                            }
                        }
                    }]
                }
            }
          }
          eg 2 : 以message开头的字段都设置为text类型
          PUT my_index
          {
            "mappings":{
                "doc":{
                   "dynamic_templates":[{
                      "message_as_text":{
                         "match_mapping_type":"string",
                         "match":"message",
                         "mapping":{
                         "type":"text"
                       }
                     }
                   }]
                }
             }
          }
          eg 3 : double类型设定为float,节省空间
          {
            "mappings":{
                "doc":{
                   "dynamic_templates":[{
                      "double_as_float":{
                         "match_mapping_type":"double",
                         "mapping":{
                         "type":"float"
                       }
                     }
                   }]
                }
             }
          }



    #4-12 自定义mapping的建议
          建立索引简单步骤：
                1 先写入一条文档到es中 获取es自动生成的mapping
                2 修改步骤1得到的mapping 自定义相关配置
                3 使用步骤2的mapping创建实际所需索引
          eg : 默认字符串为keyword 需要的设置为特定类型 --> 为了减少mapping使用量
          curl -X PUT 'localhost:9200/accounts' -d '
          {
            "mappings": {
              "person": {
                 "dynamic_templates":[{
                      "string_as_keyword":{
                         "match_mapping_type":"string",
                         "mapping":{
                         "type":"keyword"
                       }
                     }
                 }],
                "properties": {
                  "url":{
                    "type":"text"
                  },
                  "body_sent":{
                    "properties":{
                        "bytes":{
                           "type":"long"
                        }
                    }
                  },
                  "user": {
                    "type": "text",
                    "analyzer": "ik_max_word",
                    "search_analyzer": "ik_max_word"
                  },
                  "title": {
                    "type": "text",
                    "analyzer": "ik_max_word",
                    "search_analyzer": "ik_max_word"
                  },
                  "desc": {
                    "type": "text",
                    "analyzer": "ik_max_word",
                    "search_analyzer": "ik_max_word"
                  }
                }
              }
            }
          }'
    #4-13 索引模板 index_template
        @todo number_of_shards

        GET _template
        GET _template/test_template
        DELETE _template/test_template

        PUT _template/template_1
        {
          "index_patterns": ["te*", "bar*"],
          "settings": {
            "number_of_shards": 1
          },
          "mappings": {
            "type1": {
              "_source": {
                "enabled": false
              },
              "properties": {
                "host_name": {
                  "type": "keyword"
                },
                "created_at": {
                  "type": "date",
                  "format": "EEE MMM dd HH:mm:ss Z YYYY"
                }
              }
            }
          }
        }


    #4-14





